{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAiCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAiBvC,OACI,mCACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCUhBG,EAjBF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,+DAEOI,MAAOF,GAFd,cAENG,EAFM,gBAGSA,EAAKC,OAHd,uBAGLC,EAHK,EAGLA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT9B,kBAaLM,GAbK,4CAAH,sDC6BEO,EA1BM,SAACf,GAAc,IAAD,EAGLd,mBAAS,CAC/BqB,KAAM,GACNS,SAAS,IALkB,mBAGxBC,EAHwB,KAGjBC,EAHiB,KAsB/B,OAdAC,qBAAU,WAENpB,EAAQC,GACHoB,MAAK,SAAAC,GACFH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAItB,CAAChB,IAIGiB,GCdIK,EAVK,SAAC,GAAkB,IAAjBV,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEzB,OACI,sBAAKqB,UAAW,yCAAhB,UACI,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,4BAAIA,QC4BDc,EA9BC,SAAC,GAAgB,IAAf1B,EAAc,EAAdA,SAAc,EAEIe,EAAaf,GAAjCa,EAFgB,EAErBN,KAAcS,EAFO,EAEPA,QAIrB,OACI,qCACA,qBAAIO,UAAU,oCAAd,cAAoDvB,EAApD,OAECgB,GAAW,mBAAGO,UAAU,mCAAb,wBAHZ,IAMA,qBAAKA,UAAU,YAAf,SAIQV,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCWlBgB,EA/BM,WAAO,IAAD,EAEazC,mBAChC,CAAC,cAHkB,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAUvB,OACA,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CAEKA,SAAUA,GADHA,YCnBvC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.acc6de73.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue, ...cats])\r\n            setInputValue(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCategory\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nconst getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=LbikjCTfpB0cv14uLQuWgSXAPNiWJhW4`\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}\r\n\r\nexport default getGifs","import {useState, useEffect} from 'react';\r\nimport getGifs from '../helpers/getGifs';\r\n\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n   \r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category] /*si lo pones vacio lo ejecuta 1 vez*/)\r\n\r\n\r\n\r\n    return state;\r\n\r\n}\r\n\r\nexport default useFetchGifs\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className= \"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\nimport GifGridItem from \"./GifGridItem\"\r\n\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data:images , loading} = useFetchGifs(category);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>} {/* evalua si es true, sino no hace nada */}\r\n\r\n\r\n        <div className=\"card-grid\">\r\n            \r\n\r\n            {\r\n                images.map(img => (\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                ))\r\n            }\r\n         \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n\r\n","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(\r\n        [\"One Punch\"]\r\n    )\r\n\r\n    //const handleAdd = () => {\r\n    //    setCategories([...categories, \"HunterXHunter\"])\r\n    //}\r\n\r\n    return (\r\n    <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/>\r\n        \r\n        <ol>\r\n            {\r\n                categories.map(category => {\r\n                    return <GifGrid \r\n                                key = {category}\r\n                                category={category}\r\n                            />\r\n                })\r\n            }\r\n        </ol>\r\n\r\n    </>\r\n    )\r\n};\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}